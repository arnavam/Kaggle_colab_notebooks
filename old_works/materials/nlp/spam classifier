{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPeIo83SoYsd+fA6rK4k9XH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":[],"metadata":{"id":"ijDpPiAdfGq-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KK5Y8PbVfGnW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["import"],"metadata":{"id":"bF5UhpU3fFo0"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"342cukN5iL3x"},"outputs":[],"source":["mport numpy as np\n","import pandas as pd\n","# Loading the data into the environment using pandas\n","# Note: Please use appropriate filename and path\n","sms_data = pd.read_csv(\"spam.csv\", encoding='latin-1')\n","# Review the loaded data\n","print(sms_data.head())\n","cols = sms_data.columns[:2]\n","data = sms_data[cols]\n","print(data.shape)\n","data = data.rename(columns={\"v1\":\"Value\",\"v2\":\"Text\"})\n","print(data.head())\n","print(data.Value.value_counts())"]},{"cell_type":"markdown","source":["future engineering"],"metadata":{"id":"0xmKo1Qwfcs2"}},{"cell_type":"code","source":["from string import punctuation\n","import re\n","import nltk\n","from nltk import word_tokenize\n","punctuation = list(punctuation)\n","# Creating a new feature called Punctuations.\n","# This feature counts the number of punctuation characters in the sms message\n","data[\"Punctuations\"] = data[\"Text\"].apply(lambda x: len(re.findall(r\"[^\\w+&&^\\s]\",x)))\n","\n","# Creating a new feature called Phonenumbers.\n","# This feature indicates if the sms text contains a phonenumber or not\n","data[\"Phonenumbers\"] = data[\"Text\"].apply(lambda x: len(re.findall(r\"[0-9]{10}\",x)))\n","\n","# Creating a new feature called Links.\n","# This feature indicates if the sms text contains a URL or not\n","is_link = lambda x: 1 if re.search(r\"https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+\",x)!=None else 0\n","data[\"Links\"] = data[\"Text\"].apply(is_link)\n","\n","# Creating a new feature called Uppercase.\n","# This feature indicates how many words in the the sms text are in upper case\n","count_upper = lambda x : list(map(str.isupper,x.split())).count(True)\n","upper_case = lambda y,n : n+1 if y.isupper() else n\n","data[\"Uppercase\"] = data[\"Text\"].apply(count_upper)\n","\n","# Identifying and counting how many unusual words are there in the sms text\n","def find_unusual_words(text):\n","    text_vocab_set = set(w.lower() for w in text if w.isalpha())\n","    english_vocab_set = set(w.lower() for w in nltk.corpus.words.words())\n","    unusual_set = text_vocab_set - english_vocab_set\n","    return len(sorted(unusual_set))\n","data[\"unusualwords\"] = data[\"Text\"].apply(lambda x: find_unusual_words(word_tokenize(x)))\n","\n","# View a few records of the data after creating these features\n","print(data[14:25])\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","tf_idf= TfidfVectorizer(stop_words=\"english\",strip_accents='ascii',max_features=300)\n","tf_idf_matrix = tf_idf.fit_transform(data[\"Text\"])\n","\n","data_extra_features = pd.concat([data,pd.DataFrame(tf_idf_matrix.toarray(),columns=tf_idf.get_feature_names())],axis=1)"],"metadata":{"id":"xUrYJqPkgBTz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["machine learning"],"metadata":{"id":"5nDp6jU5f5bU"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X=data_extra_features\n","features = X.columns.drop([\"Value\",\"Text\",\"Value_num\"])\n","target = [\"Value\"]\n","X_train,X_test,y_train,y_test = train_test_split(X[features],X[target])\n","\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score\n","dt = DecisionTreeClassifier(min_samples_split=40)\n","dt.fit(X_train,y_train)\n","pred = dt.predict(X_test)\n","print(accuracy_score(y_train, dt.predict(X_train)))\n","print(accuracy_score(y_test, pred))"],"metadata":{"id":"O3ZtXaXOfgwE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["other models"],"metadata":{"id":"5wYmPCKXhJEH"}},{"cell_type":"code","source":["from sklearn.naive_bayes import MultinomialNB\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score\n","# Building a Naive Bayes Model\n","mnb = MultinomialNB()\n","mnb.fit(X_train,y_train)\n","pred_mnb = mnb.predict(X_test)\n","print(accuracy_score(y_test, pred_mnb))\n","\n","# Building a Logistic Regression Model\n","lr = LogisticRegression()\n","lr.fit(X_train,y_train)\n","pred_lr = lr.predict(X_test)\n","print(accuracy_score(y_test, pred_lr))"],"metadata":{"id":"EPSdlQXIg7jR"},"execution_count":null,"outputs":[]}]}